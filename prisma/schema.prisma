// Prisma Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // علاقة مع المهام
  tasks               Task[]
  sentInvitations     Invitation[] @relation("SenderInvitations")
  receivedInvitations Invitation[] @relation("ReceiverInvitations")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserTask UserTask[]

  TaskLog TaskLog[]

  Category Category[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Model for Tasks
model Task {
  id          String  @id @default(cuid())
  title       String
  description String?
  status      String  @default("To-Do") // Could be "To-Do", "In Progress", "Done"
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  parentId String? // لإضافة علاقة ذاتية مع المهام الأخرى
  parent   Task?   @relation("Subtasks", fields: [parentId], references: [id], onDelete: Cascade)
  children Task[]  @relation("Subtasks")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserTask    UserTask[]
  invitations Invitation[]

  TaskLog TaskLog[]
}

model Invitation {
  id         String   @id @default(cuid())
  senderId   String
  receiverId  String ?
  taskId     String
  email      String // لتخزين البريد الإلكتروني إذا لم يكن المدعو مستخدمًا بالفعل
  status     String   @default("Pending") // "Pending", "Accepted", "Rejected"
  token      String   @unique // لتأمين الرابط الخاص بالدعوة
  expiresAt  DateTime // لضبط وقت انتهاء صلاحية الدعوة

  sender   User  @relation("SenderInvitations", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User? @relation("ReceiverInvitations", fields: [receiverId], references: [id], onDelete: Cascade)
  task     Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

// Optional: Model for Categories
model Category {
    id       String     @id @default(cuid())
    name     String     @unique
    parentId String?
    parent   Category?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: Cascade)
    children Category[] @relation("Subcategories")
    tasks    Task[]
    userId   String?    // يمكن تحديد قيمة افتراضية إذا أردت
    user     User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


// Optional: If a many-to-many relationship is needed in future
model UserTask {
  id     String @id @default(cuid())
  userId String
  taskId String

  role String @default("Assignee") // يمكن أن تكون "Assignee" أو "Reviewer" أو أي دور آخر

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model TaskLog {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  action    String // "Created", "Updated", "Assigned", "Completed", etc.
  details   String? // أي تفاصيل إضافية
  createdAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
